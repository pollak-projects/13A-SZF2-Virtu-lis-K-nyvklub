//---------------------------------------------- FILMEK ----------------------------------------------\\

model MovieActor {
    movie_Id Int
    actor_Id Int
    movie    Movie @relation(fields: [movie_Id], references: [id])
    actor    Actor @relation(fields: [actor_Id], references: [id])

    @@id([movie_Id, actor_Id])
}

model MovieGenre {
    movie_Id Int
    genre_Id Int
    movie    Movie @relation(fields: [movie_Id], references: [id])
    genre    Genre @relation(fields: [genre_Id], references: [id])

    @@id([movie_Id, genre_Id])
}

model MovieCharacter {
    character_Id Int
    movie_Id     Int
    character    Character @relation(fields: [character_Id], references: [id])
    movie        Movie     @relation(fields: [movie_Id], references: [id])

    @@id([character_Id, movie_Id])
}

model UserMovieRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  rating    Int      // Store rating from 1-5
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId]) // Ensure a user can only rate a movie once
}

//---------------------------------------------- SOROZATOK ----------------------------------------------\\

model TvShowActor {
    tvShow_Id Int
    actor_Id  Int
    tvShow    TvShow @relation(fields: [tvShow_Id], references: [id])
    actor     Actor  @relation(fields: [actor_Id], references: [id])

    @@id([tvShow_Id, actor_Id])
}

model TvGenre {
    tvShow_Id Int
    genre_Id  Int
    tvShow    TvShow @relation(fields: [tvShow_Id], references: [id])
    genre     Genre  @relation(fields: [genre_Id], references: [id])

    @@id([tvShow_Id, genre_Id])
}

model TvCharacter {
    tvShow_Id    Int
    character_Id Int
    tvShow       TvShow    @relation(fields: [tvShow_Id], references: [id])
    character    Character @relation(fields: [character_Id], references: [id])

    @@id([tvShow_Id, character_Id])
}

model UserTVShowRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  tvShowId  Int
  rating    Int      // Store rating from 1-5
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tvShow TvShow @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([userId, tvShowId]) // Ensure a user can only rate a TV show once
}

//---------------------------------------------- KÖNYVEK ----------------------------------------------\\

model BookGenre {
    book_Id  Int
    genre_Id Int
    book     Book  @relation(fields: [book_Id], references: [id])
    genre    Genre @relation(fields: [genre_Id], references: [id])

    @@id([book_Id, genre_Id])
}

model BookCharacter {
  book_Id      Int
  character_Id Int
  book         Book      @relation(fields: [book_Id], references: [id])
  character    Character @relation(fields: [character_Id], references: [id])

  @@id([book_Id, character_Id])
}

model UserBookRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

//---------------------------------------------- EGYÉB ----------------------------------------------\\

model CharacterActor {
    character_Id Int
    actor_Id     Int
    character    Character @relation(fields: [character_Id], references: [id])
    actor        Actor     @relation(fields: [actor_Id], references: [id])

    @@id([character_Id, actor_Id])
}
